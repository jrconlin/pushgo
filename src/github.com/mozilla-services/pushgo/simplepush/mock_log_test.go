// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/github.com/mozilla-services/pushgo/simplepush/log.go

package simplepush

import (
	io "io"
	gomock "github.com/rafrombrc/gomock/gomock"
)

// Mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *_MockLoggerRecorder
}

// Recorder for MockLogger (not exported)
type _MockLoggerRecorder struct {
	mock *MockLogger
}

func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &_MockLoggerRecorder{mock}
	return mock
}

func (_m *MockLogger) EXPECT() *_MockLoggerRecorder {
	return _m.recorder
}

func (_m *MockLogger) Log(level LogLevel, messageType string, payload string, fields LogFields) error {
	ret := _m.ctrl.Call(_m, "Log", level, messageType, payload, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoggerRecorder) Log(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Log", arg0, arg1, arg2, arg3)
}

func (_m *MockLogger) SetFilter(level LogLevel) {
	_m.ctrl.Call(_m, "SetFilter", level)
}

func (_mr *_MockLoggerRecorder) SetFilter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetFilter", arg0)
}

func (_m *MockLogger) ShouldLog(level LogLevel) bool {
	ret := _m.ctrl.Call(_m, "ShouldLog", level)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockLoggerRecorder) ShouldLog(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShouldLog", arg0)
}

func (_m *MockLogger) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockLoggerRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// Mock of LoggerConfig interface
type MockLoggerConfig struct {
	ctrl     *gomock.Controller
	recorder *_MockLoggerConfigRecorder
}

// Recorder for MockLoggerConfig (not exported)
type _MockLoggerConfigRecorder struct {
	mock *MockLoggerConfig
}

func NewMockLoggerConfig(ctrl *gomock.Controller) *MockLoggerConfig {
	mock := &MockLoggerConfig{ctrl: ctrl}
	mock.recorder = &_MockLoggerConfigRecorder{mock}
	return mock
}

func (_m *MockLoggerConfig) EXPECT() *_MockLoggerConfigRecorder {
	return _m.recorder
}

func (_m *MockLoggerConfig) Open() (io.Writer, error) {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(io.Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockLoggerConfigRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open")
}

func (_m *MockLoggerConfig) GetName() string {
	ret := _m.ctrl.Call(_m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockLoggerConfigRecorder) GetName() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetName")
}

func (_m *MockLoggerConfig) GetEnvVersion() string {
	ret := _m.ctrl.Call(_m, "GetEnvVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockLoggerConfigRecorder) GetEnvVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEnvVersion")
}

// Mock of TBLoggingInterface interface
type MockTBLoggingInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockTBLoggingInterfaceRecorder
}

// Recorder for MockTBLoggingInterface (not exported)
type _MockTBLoggingInterfaceRecorder struct {
	mock *MockTBLoggingInterface
}

func NewMockTBLoggingInterface(ctrl *gomock.Controller) *MockTBLoggingInterface {
	mock := &MockTBLoggingInterface{ctrl: ctrl}
	mock.recorder = &_MockTBLoggingInterfaceRecorder{mock}
	return mock
}

func (_m *MockTBLoggingInterface) EXPECT() *_MockTBLoggingInterfaceRecorder {
	return _m.recorder
}

func (_m *MockTBLoggingInterface) Logf(_param0 string, _param1 ...interface{}) {
	_s := []interface{}{_param0}
	for _, _x := range _param1 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Logf", _s...)
}

func (_mr *_MockTBLoggingInterfaceRecorder) Logf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Logf", _s...)
}
