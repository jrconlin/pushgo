// Automatically generated by MockGen. DO NOT EDIT!
// Source: src/github.com/mozilla-services/pushgo/simplepush/socket.go

package simplepush

import (
	gomock "github.com/rafrombrc/gomock/gomock"
	time "time"
)

// Mock of Socket interface
type MockSocket struct {
	ctrl     *gomock.Controller
	recorder *_MockSocketRecorder
}

// Recorder for MockSocket (not exported)
type _MockSocketRecorder struct {
	mock *MockSocket
}

func NewMockSocket(ctrl *gomock.Controller) *MockSocket {
	mock := &MockSocket{ctrl: ctrl}
	mock.recorder = &_MockSocketRecorder{mock}
	return mock
}

func (_m *MockSocket) EXPECT() *_MockSocketRecorder {
	return _m.recorder
}

func (_m *MockSocket) Origin() string {
	ret := _m.ctrl.Call(_m, "Origin")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockSocketRecorder) Origin() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Origin")
}

func (_m *MockSocket) SetReadDeadline(t time.Time) error {
	ret := _m.ctrl.Call(_m, "SetReadDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSocketRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReadDeadline", arg0)
}

func (_m *MockSocket) SetWriteDeadline(t time.Time) error {
	ret := _m.ctrl.Call(_m, "SetWriteDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSocketRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetWriteDeadline", arg0)
}

func (_m *MockSocket) ReadJSON(v interface{}) error {
	ret := _m.ctrl.Call(_m, "ReadJSON", v)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSocketRecorder) ReadJSON(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadJSON", arg0)
}

func (_m *MockSocket) WriteJSON(v interface{}) error {
	ret := _m.ctrl.Call(_m, "WriteJSON", v)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSocketRecorder) WriteJSON(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteJSON", arg0)
}

func (_m *MockSocket) ReadBinary() ([]byte, error) {
	ret := _m.ctrl.Call(_m, "ReadBinary")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSocketRecorder) ReadBinary() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadBinary")
}

func (_m *MockSocket) WriteBinary(data []byte) error {
	ret := _m.ctrl.Call(_m, "WriteBinary", data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSocketRecorder) WriteBinary(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteBinary", arg0)
}

func (_m *MockSocket) ReadText() (string, error) {
	ret := _m.ctrl.Call(_m, "ReadText")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSocketRecorder) ReadText() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadText")
}

func (_m *MockSocket) WriteText(data string) error {
	ret := _m.ctrl.Call(_m, "WriteText", data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSocketRecorder) WriteText(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WriteText", arg0)
}

func (_m *MockSocket) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockSocketRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
