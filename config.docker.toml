# General config options to define the server.
# Please copy to config.toml

[default]
# FQDN of the current hostname. (Note, AWS returns an invalid value
# for hostname)
# If this is not defined, app will also query environment $HOST value.
#current_host = "localhost"
# If you're running on Amazon, try pulling the public hostname from the
# metadata service
#use_aws_host = false
# Specifies whether the hostname should be resolved to an IP address.
resolve_host = true

# This defines what endpoint to use for updates.
# {{.CurrentHost}} = the current host to connect to.
#        (note, in most cases, this should be the general cname for
#         the service, e.g. "push.services.mozilla.org") Only use
#         this field for debugging or development since this will
#         route endpoints to a specific box.
# {{.Token}} = the LSoC (long string of crap) that uniquely identifies a
#         UserAgentID (uaid) and ChannelID (chid).
#push_endpoint_template = "{{.CurrentHost}}/update/{{.Token}}"
# reply to pings with "{}" if push_long_pongs is false
#push_long_pongs = false

# define this to encode the Primary Key / ChannelID combo
# this is a valid 16, 24, or 32 []byte created by crypto/rand.Read()
# This key can be generated by running go run tools/genKey/main.go
# e.g.
#token_key = "W8FfY9Tw9PtMSEFJF0MAkw=="

# Minimum time between pings (0 == no minimum ping interval)
# Clients that ping more frequently than this will have their socket closed
# and may be considered "hostile".
client_min_ping_interval = "10s"
## Timeout socket if not recv'd hello
#client_hello_timeout = "30s"
client_pong_interval = "5m"

[websocket]
#origins = []

[websocket.listener]
# The WebSocket listener address and port. 0.0.0.0 = all interfaces
addr = ":8080"
# The maximum number of concurrent connections that this listener can
# accept before waiting for existing connections to close.
max_connections = 250000
# The TCP keep-alive period for WebSocket connections.
#tcp_keep_alive = "3m"
# Paths to SSL certificate files.
#cert_file = "certs/test.crt"
#key_file = "certs/test.key"

[endpoint]
#max_data_len = 4096

[default.endpoint]
addr = ":8081"
max_connections = 40000
#tcp_keep_alive = "3m"
#cert_file = "certs/test.crt"
#key_file = "certs/test.key"

[profile]
enabled = true

[profile.listener]
addr = ":8082"
max_connections = 100

# Proprietary pings
[propping]
# Do nothing (default)
type = "noop"

# GCM config used for android proprietary pings (EXPERIMENTAL)
#[propping]
#type = gcm
#ttl = "72h"
#collapse_key = "simplepush"
#dry_run = false
#api_key = "YOUR_API_KEY"
#url = "https://android.googleapis.com/gcm/send"

# Carrier-specific UDP pings
#[propping]
#type = udp
#url = "vendor provided URL here"

# Local file logging.
[logging]
type = "file"
format = "protobuf"
path = "/var/log/pushgo.log"
env_version = "2"
filter = 2

[storage]
# Available Types:
# none = no storage
# memcache_gomc = Use the gomc library; requires local libmemcache 1.0.6
# memcache_memcachego = Use the go native memcache library; does not require local libmemcache
type = "none"
# Maximum number of client channels before we send a re-registration request
#max_channels = 200
#  Use the AWS Elasticache node discovery discovery system. This will use
#  the values specified in memcache.server as "backup" in case the call
#  fails.
#elasticache_config_endpoint =

#[storage.memcache]
#  Memcache data servers
#  multiple memcache servers can be appended with commas (e.g.
#  ["10.0.0.1:11211", "10.0.0.2:11211", ... ]  )
#server = ["127.0.0.1:11211"]
# Number of connections to pool per server
#  a connection is a socket to a remote memcache server. Obviously, this
#  decreases the number of sockets available
#max_connections = 100

# Memcache timeouts
# WARNING: Memcache is VERY SENSITIVE about these timeouts, improperly high
# settings will cause INVALID ARGUMENTS errors
#recv_timeout = "5s"
#send_timeout = "5s"
#poll_timeout = "15ms"
#retry_timeout = "5s"

#[storage.db]
# "live" records timeout in 3 days
#timeout_live = 259200
# "registrations" timeout in 3 hours
#timeout_reg = 10800
# "deleted" records time out in 1 day
#timeout_del = 86400
#handle_timeout = 5s
#prop_prefix = "_pc-"

[router]
# Default host to shard users to, defaults to global hostname above
#default_host = "localhost"
# Fail a route connection attempt after timeout seconds
#ctimeout = "3s"
# Fail a route processing attempt after timeout seconds
#rwtimeout = "3s"
# how big a "bucket" of servers to try in one go.
# Note: buckets should be between 10 and 50 servers
# (31MM hosts divided by 200K means ~155 servers, so bucket_size of 10
# means 16 buckets. Have fun with probability tables to figure out the
# size that works best for you.)
#bucket_size = 10
#max_data_len = 4096
#idle_conns = 50

[router.listener]
# Default interface and port for shard routing
# (NOTE: the port should not be publicly accessible)
addr = ":3000"
max_connections = 60000

[discovery]
type = "static"

[metrics]
store_snapshots = false
statsd_name = "pushgo"
statsd_server = ":8125"

[balancer]
type = "none"
